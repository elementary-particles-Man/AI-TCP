{
  "task_group_id": "AITCP_Implement_Compression_Module",
  "description": "Task for the CLI to implement the payload compression logic within the previously created stub.",
  "tasks": [
    {
      "comment": "Implement LZ4 compression in compression.rs",
      "task_id": "AITCP-OPT-001-IMPL",
      "command": "powershell",
      "args": [
        "-Command",
        "Set-Content -Path src/protocols/compression.rs -Value @"
using lz4_flex::{compress_prepend_size, decompress_size_prepended};

pub fn compress(data: &[u8]) -> Vec<u8> {
    compress_prepend_size(data)
}

pub fn decompress(compressed_data: &[u8]) -> Result<Vec<u8>, lz4_flex::block::DecompressError> {
    decompress_size_prepended(compressed_data)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_compression_decompression() {
        let original = b\"This is a test payload for AI-TCP compression. Repetition helps compression.\";
        let compressed = compress(original);
        assert!(compressed.len() < original.len());
        let decompressed = decompress(&compressed).unwrap();
        assert_eq!(original.to_vec(), decompressed);
    }
}
"@
      ]
    },
    {
      "task_id": "AITCP-OPT-001-TEST",
      "description": "Run tests for the compression module.",
      "command": "powershell",
      "args": [
        "-Command",
        "cd src/protocols; cargo test --package kairo_core -- --nocapture"
      ]
    },
    {
      "task_id": "AITCP-OPT-001-FLAG",
      "description": "Create a completion flag for this implementation task.",
      "command": "powershell",
      "args": [
        "-Command",
        "New-Item -Path validate_files/AITCP-OPT-001.flag -ItemType File -Value 'Compression module implemented and tested successfully.'"
      ]
    }
  ]
}
