{
  "task_group_id": "AITCP_Integrate_KAIRO_into_API_Server",
  "description": "Task for the CLI to implement the core logic of the API server, integrating the completed KAIRO library for secure packet handling.",
  "tasks": [
    {
      "comment": "Update AI-TCP's Cargo.toml to add KAIRO as a local dependency via the submodule path.",
      "task_id": "AITCP-INT-001",
      "command": "powershell",
      "args": [
        "-Command",
        "$cargoToml = 'Cargo.toml'; if (-not (Select-String -Path $cargoToml -Pattern 'kairo-rust-core')) { Add-Content -Path $cargoToml -Value '[dependencies]\nkairo-rust-core = { path = \"protocols/kairo-client/rust-core\" }' }"
      ]
    },
    {
      "comment": "Implement KAIRO integration logic in src/api_server/main.rs. The server will now handle binary data.",
      "task_id": "AITCP-INT-002",
      "command": "powershell",
      "args": [
        "-Command",
        "Set-Content -Path src/api_server/main.rs -Value @"
use axum::{
    routing::post,
    Router,
    Json,
    http::StatusCode,
    response::IntoResponse
};
use std::net::SocketAddr;
use serde::Serialize;
use bytes::Bytes;

// KAIROコアライブラリをインポート
// このパスはKAIRO側のlib.rsの定義に依存する
use kairo_rust_core::packet_parser::PacketParser;
use kairo_rust_core::error::KairoError;

// APIが返すレスポンス
#[derive(Serialize)]
struct ApiResponse {
    transaction_id: String,
    status: String,
    error: Option<String>,
}

// ボディとしてバイナリデータ(Bytes)を受け取るように変更
async fn aitcp_handler(body: Bytes) -> impl IntoResponse {
    println!(\"Received binary packet of size: {} bytes\", body.len());

    // --- KAIRO Integration Point ---
    // ここでKAIROのパーサーを呼び出し、パケットを検証する
    let mut parser = PacketParser::new(vec![0; 32]); // セッションキーはダミー

    match parser.parse(&body) {
        Ok(_packet) => {
            // パケットの検証・復号に成功
            // TODO: 復号されたペイロードに対する処理を実装
            let response = ApiResponse {
                transaction_id: uuid::Uuid::new_v4().to_string(), // Temporarily use new UUID
                status: \"Packet Verified and Processed (KAIRO OK)\".to_string(),
                error: None,
            };
            (StatusCode::OK, Json(response))
        },
        Err(e) => {
            // KAIROがエラーを検知（署名不正、シーケンス不一致など）
            // VoVログには詳細が記録される
            eprintln!(\"KAIRO validation failed: {:?}\", e);
            let response = ApiResponse {
                transaction_id: uuid::Uuid::new_v4().to_string(),
                status: \"Failed\".to_string(),
                error: Some(\"Security validation failed\".to_string()),
            };
            (StatusCode::BAD_REQUEST, Json(response))
        }
    }
}

#[tokio::main]
async fn main() {
    // api_server.rsはAI-TCPリポジトリのバイナリターゲットであるべき
    // そのため、main関数はここに配置する
    let app = Router::new().route(\"/api/v1/aitcp\", post(aitcp_handler));

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    println!(\"AI-TCP API server with KAIRO integration listening on {}\", addr);

    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}
"@
      ]
    },
    {
      "task_id": "AITCP-INT-003",
      "description": "Build the AI-TCP server to ensure successful integration.",
      "command": "powershell",
      "args": [
        "-Command",
        "cargo build --bin api_server"
      ]
    },
    {
      "task_id": "PROJECT-INTEGRATION-FLAG",
      "description": "Create a final completion flag.",
      "command": "powershell",
      "args": [
        "-Command",
        "New-Item -Path validate_files/PROJECT_INTEGRATION.flag -ItemType File -Value 'KAIRO core library successfully integrated into AI-TCP API server.'"
      ]
    }
  ]
}
