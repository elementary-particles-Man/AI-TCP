#!/usr/bin/env python3
"""Extract Mermaid code from HTML or .mmd files.

This utility reads a Mermaid diagram either from a standalone ``.mmd`` file
or from an HTML file generated by tools in this repository. The extracted
Mermaid code is formatted as a YAML snippet for ``graph_payload.graph_structure``.
External dependencies are avoided so the script can run in restricted
environments.
"""
from __future__ import annotations

import argparse
import re
from pathlib import Path
from typing import Iterable


def _read_mermaid_from_html(text: str) -> str:
    """Return Mermaid code found in ``div.mermaid`` or ``code.language-mermaid``."""
    patterns: Iterable[str] = [
        r'<div\s+class=["\']mermaid["\']>(.*?)</div>',
        r'<code\s+class=["\']language-mermaid["\']>(.*?)</code>'
    ]
    for pat in patterns:
        m = re.search(pat, text, flags=re.S)
        if m:
            return m.group(1).strip()
    return ""


def _read_mermaid(path: Path) -> str:
    if path.suffix.lower() == ".html":
        return _read_mermaid_from_html(path.read_text(encoding="utf-8"))
    return path.read_text(encoding="utf-8")


def _format_yaml(code: str) -> str:
    code = code.strip().splitlines()
    if not code:
        return ""
    lines = ["graph_payload:", "  graph_structure: |"]
    lines.append(f"    mmd:{code[0]}")
    lines.extend(f"    {ln}" for ln in code[1:])
    return "\n".join(lines) + "\n"


def main() -> None:
    parser = argparse.ArgumentParser(description="Extract Mermaid to YAML snippet")
    parser.add_argument("input", help="HTML or .mmd file")
    parser.add_argument("--output", "-o", help="Output YAML file")
    args = parser.parse_args()

    mermaid = _read_mermaid(Path(args.input))
    if not mermaid:
        raise SystemExit("No Mermaid code found")

    yaml_text = _format_yaml(mermaid)
    if args.output:
        Path(args.output).write_text(yaml_text, encoding="utf-8")
    else:
        print(yaml_text)


if __name__ == "__main__":
    main()
